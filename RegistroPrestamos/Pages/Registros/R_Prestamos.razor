@page "/Prestamos"
@page "/Prestamos/{PrestamoId:int}"

@using Models
@using RegistroPrestamos.BLL


@inject IToastService toast


<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">
            <form>

                @*PrestamoId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>PrestamoId</label>
                            <div class="input-group">
                                <InputNumber @bind-Value="Prestamo.PrestamoId" class="form-control col-4" />
                                <div class="input-group-append">
                                    <button type="button" class="btn btn-primary input-group-text" @onclick="Buscar">Buscar</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>


                @*Fecha*@
                <div class="form-group">
                    <label>Fecha</label>
                    <InputDate @bind-Value="Prestamo.Fecha" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.Fecha)" />
                </div>

                @*Persona*@
                <div class="form-group">
                    <label>Persona</label>
                    <InputText @bind-Value="Prestamo.NombrePersona" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.NombrePersona)" />
                </div>

                @*Concepto*@
                <div class="form-group">
                    <label>Concepto</label>
                    <InputText @bind-Value="Prestamo.Concepto" class="form-control" />
                    <ValidationMessage For="@(()=>Prestamo.Concepto)" />
                </div>

                @*Monto*@
                <div class="form-group">
                    <label>Monto</label>
                    <InputNumber @bind-Value="Prestamo.Monto" class="form-control"/>
                    <ValidationMessage For="@(()=>Prestamo.Monto)" />
                </div>

                @*Moras*@
                <div class="card">
                    <div class="card-body">
                        <div class="form-row">
                            @*FechaMora*@
                            <div class="form-group">
                                <label>Fecha Mora</label>
                                <InputDate @bind-Value="FechaMora" class="form-control" />
                            </div>

                            @*ValorMora*@
                            <div class="form-group col">
                                <label>ValorMora</label>
                                <div class="input-group">
                                    <InputNumber  @bind-Value="ValorMora" class="form-control"  @onfocusout="ActualizarBalance"/>
                                    <div class="input-group-append">
                                        <button type="button" class="btn btn-primary" @onclick="AgregarDetalle">
                                            <i class="oi oi-plus" aria-hidden="true" /> Agregar
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <table class="table">
                            <thead class="thead-light">
                                <tr>
                                    <th scope="col">MoraId</th>
                                    <th scope="col">Fecha</th>
                                    <th scope="col">Valor</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Prestamo.MorasDetalle)
                                {
                                    <tr>
                                        <td>@item.MoraId</td>
                                        <td>@FechaMora</td>
                                        <td>@item.Valor</td>
                                    </tr>
                                }

                            </tbody>
                        </table>
                    </div>
                </div>












                @*Balance*@
                <div class="form-group">
                    <label>Balance</label>
                    <InputNumber ReadOnly id="Balance" @bind-Value="Prestamo.Balance" class="form-control" />
                </div>
            </form>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: in line-block>
                <button type="button" class="btn btn-lg btn-primary" @onclick="Nuevo">Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success">Guardar</button>
                <button type="button" class="btn btn-lg btn-danger" @onclick="Eliminar">Eliminar</button>
            </div>
        </div>

    </div>

</EditForm>

@code {
    [Parameter]
    public int PrestamoId { get; set; }

    private Prestamos Prestamo = new Prestamos();

    private DateTime FechaMora;
    private decimal ValorMora=0;

    protected override void OnInitialized()
    {
        Nuevo();

        Buscar();

    }

    public void Nuevo()
    {
        Prestamo = new Prestamos();
    }

    private void AgregarDetalle()
    {
        Prestamo.MorasDetalle.Add(new MorasDetalle
        {
            MoraId = new Moras().MoraId,
            PrestamoId = Prestamo.PrestamoId,
            Valor = ValorMora

        }); ;

    }


    private void Buscar()
    {
        if (Prestamo.PrestamoId > 0)
        {
            var encontrado = PrestamosBLL.Buscar(Prestamo.PrestamoId);

            if (encontrado != null)
                this.Prestamo = encontrado;
            else
                toast.ShowWarning("No encontrado");

        }
    }


    public void Guardar()
    {
        bool guardo;
        guardo = PrestamosBLL.Guardar(Prestamo);

        if (guardo)
        {
            Nuevo();
            toast.ShowSuccess("Guardado Correctamente");
        }
        else
        {
            toast.ShowError("No fue posible Guardar");
        }
    }

    public void Eliminar()
    {
        bool elimino;
        elimino = PrestamosBLL.Eliminar(Prestamo.PrestamoId);

        if (elimino)
        {
            Nuevo();
            toast.ShowSuccess("Eliminado correctamente");
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    public void ActualizarBalance()
    {
        Prestamo.Balance +=  ValorMora;
    }

}
